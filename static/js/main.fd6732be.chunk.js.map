{"version":3,"sources":["api/httpClient.ts","services/foldersStructure.ts","components/FoldersStructure/FolderNode.tsx","utils/formatters/bytes.ts","utils/formatters/files.ts","utils/index.ts","utils/formatters/index.ts","components/FoldersStructure/FileNode.tsx","components/common/ErrorMessageWithReload.tsx","components/common/Loading.tsx","components/FoldersStructure/FoldersTree.tsx","components/DynamicData/index.tsx","hooks/useFoldersStructure.ts","components/common/Header.tsx","components/common/Footer.tsx","styles/theme.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["axiosClient","axios","create","defaults","baseURL","headers","common","Accept","interceptors","request","use","a","config","error","console","Promise","reject","response","getFoldersStructureData","get","then","data","FolderNode","folderName","children","useState","isCollapsed","setIsCollapsed","data-testid","sx","display","alignItems","alignContent","cursor","opacity","onClick","color","fontSize","Typography","variant","fontWeight","style","margin","marginLeft","height","formatBytes","bytes","decimals","kilo","correctedDecimals","sizes","exponent","Math","floor","log","parseFloat","pow","toFixed","fileWithoutExtension","filename","indexOf","split","slice","join","utils","format","files","FileNode","fileName","size","Box","flexDirection","Number","ErrorMessageWithReload","message","Alert","severity","alignSelf","columns","action","Button","window","location","reload","AlertTitle","Loading","loadingMessage","justifyContent","CircularProgress","FoldersTree","foldersStructureData","structure","count","structureBuilder","setStructureBuilder","crateFolderStructure","useCallback","filesData","map","node","index","type","name","Error","e","useEffect","Array","isArray","component","padding","Divider","borderBottomWidth","DynamicData","useQuery","retry","refetchOnWindowFocus","retryOnMount","isLoading","isError","Header","theme","useTheme","borderRadius","backgroundColor","palette","grey","Footer","flex","Link","href","underline","target","rel","createTheme","typography","allVariants","responsiveFontSizes","queryClient","QueryClient","App","client","ThemeProvider","Container","maxWidth","Grid","container","boxShadow","item","xs","md","overflowX","direction","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fd6732be.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst axiosClient = axios.create();\r\n\r\naxiosClient.defaults.baseURL = \"https://dev21.becollective.com/api/v2/coding-challenges/dirs\";\r\n\r\naxiosClient.defaults.headers.common = {\r\n  \"Content-Type\": \"application/json\",\r\n  Accept: \"application/json\",\r\n};\r\n\r\n// All request will wait 2 seconds before timeout\r\n// axiosClient.defaults.timeout = 2000;\r\n\r\n// axiosClient.defaults.withCredentials = true;\r\n\r\naxiosClient.interceptors.request.use(\r\n  async (config) => {\r\n    return config;\r\n  },\r\n  (error) => {\r\n    console.error(\"axiosClient.interceptors.request\", error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\naxiosClient.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  (error) => {\r\n    console.error(\"axiosClient.interceptors.response\", error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default axiosClient;\r\n","import axiosClient from \"../api/httpClient\";\r\nimport { TreeNodeType } from \"../types/Tree.types\";\r\n\r\nexport const getFoldersStructureData = async (): Promise<TreeNodeType[]> => {\r\n  return axiosClient.get(\"\").then((response) => response.data);\r\n};\r\n","import { useState } from \"react\";\r\nimport { Typography } from \"@mui/material\";\r\nimport { Box } from \"@mui/system\";\r\nimport KeyboardArrowRightIcon from \"@mui/icons-material/KeyboardArrowRight\";\r\nimport KeyboardArrowDownIcon from \"@mui/icons-material/KeyboardArrowDown\";\r\nimport FolderIcon from \"@mui/icons-material/Folder\";\r\nimport FolderOpenIcon from \"@mui/icons-material/FolderOpen\";\r\n\r\nexport type FolderNodeProps = {\r\n  folderName: string;\r\n  children?: React.ReactNode | undefined;\r\n};\r\n\r\nexport const FolderNode = ({ folderName, children }: FolderNodeProps) => {\r\n  const [isCollapsed, setIsCollapsed] = useState(true);\r\n  const onFolderNodeClick = () => {\r\n    setIsCollapsed(!isCollapsed);\r\n  };\r\n  return (\r\n    <>\r\n      <Box\r\n        data-testid='FolderNodeBox'\r\n        sx={{\r\n          display: \"flex\",\r\n          alignItems: \"center\",\r\n          alignContent: \"center\",\r\n\r\n          cursor: \"pointer\",\r\n\r\n          \"&:hover\": {\r\n            opacity: [1.0, 1.0, 0.7],\r\n          },\r\n        }}\r\n        onClick={onFolderNodeClick}>\r\n        {isCollapsed ? (\r\n          <>\r\n            <KeyboardArrowRightIcon color='action' fontSize='small' />\r\n            <FolderIcon color='action' />\r\n          </>\r\n        ) : (\r\n          <>\r\n            <KeyboardArrowDownIcon color='action' fontSize='small' />\r\n            <FolderOpenIcon color='action' />\r\n          </>\r\n        )}\r\n        <Typography\r\n          variant='body1'\r\n          fontWeight='500'\r\n          style={{ margin: \"0.3rem 0.6rem 0.3rem 0.6rem\" }}>\r\n          {folderName}\r\n        </Typography>\r\n      </Box>\r\n      <Box>\r\n        {!isCollapsed ? (\r\n          <Box\r\n            sx={{\r\n              marginLeft: \"2rem\",\r\n              height: isCollapsed ? 0 : \"auto\",\r\n            }}>\r\n            {children}\r\n          </Box>\r\n        ) : null}\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FolderNode;\r\n","export const formatBytes = (bytes: number, decimals: number = 0): string => {\r\n  if (bytes === 0) return \"0Bytes\";\r\n\r\n  const kilo = 1024;\r\n  const correctedDecimals = decimals < 0 ? 0 : decimals;\r\n  const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"];\r\n\r\n  const exponent = Math.floor(Math.log(bytes) / Math.log(kilo));\r\n\r\n  return (\r\n    parseFloat((bytes / Math.pow(kilo, exponent)).toFixed(correctedDecimals)) + sizes[exponent]\r\n  );\r\n};\r\n","/**\r\n * @function\r\n * @description a function to truncate extensions from a filename string if exist, if not returns filename\r\n * @param filename string\r\n * @returns filename without extension\r\n */\r\nexport const fileWithoutExtension = (filename: string): string => {\r\n  return filename.indexOf(\".\") >= 0\r\n    ? filename.split(\".\").slice(0, -1).join(\".\")\r\n    : filename;\r\n};\r\n","import { format } from \"./formatters\";\r\n\r\nconst utils = {\r\n  format,\r\n};\r\n\r\nexport default utils;\r\n","import * as bytes from \"./bytes\";\r\nimport * as files from \"./files\";\r\n\r\nexport const format = {\r\n  ...bytes,\r\n  ...files,\r\n};\r\n","import { Box, Typography } from \"@mui/material\";\r\nimport utils from \"../../utils\";\r\nimport DescriptionIcon from \"@mui/icons-material/Description\";\r\n\r\nexport type FileNodeProps = { fileName: string; size: number | undefined };\r\nexport const FileNode = ({ fileName, size }: FileNodeProps) => {\r\n  return (\r\n    <Box\r\n      sx={{\r\n        flexDirection: \"row\",\r\n        display: \"flex\",\r\n        alignContent: \"flex-start\",\r\n        alignItems: \"center\",\r\n      }}>\r\n      <DescriptionIcon color='action' />\r\n      <Typography variant='body1' style={{ margin: \"0.3rem 0.6rem 0.3rem 0.6rem\" }}>\r\n        {utils.format.fileWithoutExtension(fileName)}\r\n      </Typography>\r\n      <Typography variant='subtitle2'>{utils.format.formatBytes(Number(size ?? 0))}</Typography>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default FileNode;\r\n","import { Alert, Button, AlertTitle } from \"@mui/material\";\r\n\r\nexport type ErrorMessageWithReloadProps = {\r\n  message?: string;\r\n};\r\n\r\nconst ErrorMessageWithReload = ({\r\n  message = \"Something went wrong, please try again\",\r\n}: ErrorMessageWithReloadProps) => {\r\n  return (\r\n    <Alert\r\n      severity='error'\r\n      variant='standard'\r\n      sx={{\r\n        alignSelf: \"center\",\r\n        margin: \"0rem 0rem 3rem 0rem\",\r\n        columns: 1,\r\n      }}\r\n      action={\r\n        <Button color='inherit' size='small' onClick={() => window.location.reload()}>\r\n          Retry\r\n        </Button>\r\n      }>\r\n      <AlertTitle>Server Error</AlertTitle>\r\n      {/* {error instanceof Error ? error.message : \"Unable to fetch folders data\"} */}\r\n      {message}\r\n    </Alert>\r\n  );\r\n};\r\n\r\nexport default ErrorMessageWithReload;\r\n","import { CircularProgress, Typography } from \"@mui/material\";\r\nimport { Box } from \"@mui/system\";\r\n\r\ntype LoadingProps = {\r\n  loadingMessage: string;\r\n};\r\n\r\nconst Loading = ({ loadingMessage = \"loading ...\" }: LoadingProps) => {\r\n  return (\r\n    <Box\r\n      sx={{\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        margin: \"1.875rem\",\r\n      }}>\r\n      <CircularProgress sx={{ color: \"text.primary\" }} />\r\n      <Typography sx={{ margin: \"1rem\" }}>{loadingMessage}</Typography>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Loading;\r\n","import FolderNode from \"./FolderNode\";\r\nimport FileNode from \"./FileNode\";\r\nimport { useCallback, useEffect, useState } from \"react\";\r\nimport { Box, Divider, Typography } from \"@mui/material\";\r\nimport utils from \"../../utils\";\r\nimport { FilesDataType, TreeNodeType } from \"../../types/Tree.types\";\r\nimport { CreateFolderStructureResult } from \"../../types/Structure.types\";\r\nimport ErrorMessageWithReload from \"../common/ErrorMessageWithReload\";\r\nimport Loading from \"../common/Loading\";\r\n\r\nexport type FoldersTreeProps = {\r\n  foldersStructureData?: TreeNodeType[];\r\n};\r\n\r\nexport const initialState: CreateFolderStructureResult = {\r\n  structure: null,\r\n  files: { count: 0, size: 0 },\r\n  error: null,\r\n};\r\n\r\nexport const FoldersTree = ({ foldersStructureData }: FoldersTreeProps) => {\r\n  const [structureBuilder, setStructureBuilder] = useState<CreateFolderStructureResult>({\r\n    structure: null,\r\n    files: { count: 0, size: 0 },\r\n    error: null,\r\n  });\r\n\r\n  const crateFolderStructure = useCallback(\r\n    (data: TreeNodeType[], filesData: FilesDataType): CreateFolderStructureResult => {\r\n      try {\r\n        const folderTree = data.map((node, index) => {\r\n          switch (node.type) {\r\n            case \"folder\":\r\n              return (\r\n                <FolderNode key={index} folderName={node.name}>\r\n                  {crateFolderStructure(node.children as TreeNodeType[], filesData).structure}\r\n                </FolderNode>\r\n              );\r\n            case \"file\":\r\n              filesData.count++;\r\n              filesData.size += node.size ?? 0;\r\n              return <FileNode key={index} fileName={node.name} size={node.size} />;\r\n            default:\r\n              throw new Error(\"Corrupted data!\");\r\n          }\r\n        });\r\n\r\n        return { structure: folderTree, files: filesData, error: null };\r\n      } catch (e) {\r\n        return { structure: null, files: filesData, error: e as Error };\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (foldersStructureData && Array.isArray(foldersStructureData)) {\r\n      setStructureBuilder(crateFolderStructure(foldersStructureData, structureBuilder.files));\r\n    }\r\n  }, [crateFolderStructure, foldersStructureData, structureBuilder.files]);\r\n\r\n  return (\r\n    <>\r\n      {structureBuilder.structure ? (\r\n        <Box\r\n          component='div'\r\n          sx={{\r\n            padding: \"1rem\",\r\n            margin: \"1rem 0 0 1rem\",\r\n          }}>\r\n          {structureBuilder.structure}\r\n        </Box>\r\n      ) : structureBuilder.error ? (\r\n        <ErrorMessageWithReload message={\"Data processing failed, try again\"} />\r\n      ) : (\r\n        <Loading loadingMessage='Building folders tree...' />\r\n      )}\r\n      <Divider variant='middle' sx={{ borderBottomWidth: 3 }} />\r\n      <Box sx={{ margin: \"1rem 0 1rem 2.5rem\" }}>\r\n        <Typography variant='subtitle1' fontWeight='500'>\r\n          Total Files: {structureBuilder.files.count}\r\n        </Typography>\r\n        <Typography variant='subtitle1' fontWeight='500'>\r\n          Total Files Size: {utils.format.formatBytes(structureBuilder.files.size)}\r\n        </Typography>\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FoldersTree;\r\n","import { useFoldersStructure } from \"../../hooks/useFoldersStructure\";\r\nimport FolderTree from \"../FoldersStructure/FoldersTree\";\r\nimport Loading from \"../common/Loading\";\r\nimport ErrorMessageWithReload from \"../common/ErrorMessageWithReload\";\r\n\r\nfunction DynamicData() {\r\n  const { isLoading, isError, data } = useFoldersStructure();\r\n\r\n  if (isLoading) {\r\n    return <Loading loadingMessage='Fetching Data ...' />;\r\n  }\r\n  if (isError) {\r\n    return <ErrorMessageWithReload message={\"Unable to fetch folders data\"} />;\r\n  }\r\n  return <FolderTree foldersStructureData={data} />;\r\n}\r\n\r\nexport default DynamicData;\r\n","import { useQuery } from \"react-query\";\r\nimport { getFoldersStructureData } from \"../services/foldersStructure\";\r\n\r\nexport const useFoldersStructure = () => {\r\n  return useQuery(\"FolderStructure\", getFoldersStructureData, {\r\n    retry: false,\r\n    refetchOnWindowFocus: false,\r\n    retryOnMount: false,\r\n  });\r\n};\r\n","import { Box, useTheme } from \"@mui/material\";\r\nimport FiberManualRecordIcon from \"@mui/icons-material/FiberManualRecord\";\r\nconst Header = () => {\r\n  const theme = useTheme();\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        borderRadius: \"0.3125rem 0.3125rem 0 0\",\r\n        backgroundColor: theme.palette.grey[500],\r\n        color: theme.palette.grey[700],\r\n        padding: \"0.25rem 0 0 0.5rem \",\r\n      }}>\r\n      <FiberManualRecordIcon fontSize='small' />\r\n      <FiberManualRecordIcon fontSize='small' />\r\n      <FiberManualRecordIcon fontSize='small' />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import { Box, Divider, Link } from \"@mui/material\";\r\nimport GitHubIcon from \"@mui/icons-material/GitHub\";\r\nconst Footer = () => {\r\n  return (\r\n    <Box\r\n      sx={{\r\n        flex: 1,\r\n        flexDirection: \"row\",\r\n        justifyContent: \"space-between\",\r\n        margin: \"0.5rem\",\r\n      }}>\r\n      <Divider variant='fullWidth' />\r\n      <Box\r\n        display={\"flex\"}\r\n        flexDirection={\"row\"}\r\n        justifyContent={\"flex-end\"}\r\n        padding={\".5rem 0.5rem 0 0\"}>\r\n        <Link\r\n          href='https://github.com/mohsenramy/wf-folders' //https://git.io/J1AcH\r\n          underline='hover'\r\n          variant='caption'\r\n          color='inherit'\r\n          target='_blank'\r\n          rel='noopener'\r\n          sx={{\r\n            fontSize: \"0.8rem\",\r\n            fontWeight: \"600\",\r\n          }}>\r\n          <GitHubIcon fontSize='inherit' /> GitHub Repo\r\n        </Link>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import { createTheme, responsiveFontSizes } from \"@mui/material/styles\";\r\n\r\nlet theme = createTheme({\r\n  typography: {\r\n    allVariants: {\r\n      color: \"#899198\",\r\n      // fontSize: 12,\r\n    },\r\n  },\r\n});\r\ntheme = responsiveFontSizes(theme);\r\n\r\nexport default theme;\r\n","import \"./App.css\";\r\nimport { QueryClient, QueryClientProvider } from \"react-query\";\r\nimport { Box, Container, Grid } from \"@mui/material\";\r\nimport { ThemeProvider } from \"@mui/material/styles\";\r\nimport DynamicData from \"./components/DynamicData\";\r\nimport Header from \"./components/common/Header\";\r\nimport Footer from \"./components/common/Footer\";\r\nimport theme from \"./styles/theme\";\r\n\r\nconst queryClient = new QueryClient();\r\nfunction App() {\r\n  return (\r\n    <QueryClientProvider client={queryClient}>\r\n      <ThemeProvider theme={theme}>\r\n        <Container maxWidth='lg'>\r\n          <Box\r\n            component={Grid}\r\n            container\r\n            sx={{\r\n              justifyContent: \"center\",\r\n              alignItems: \"center\",\r\n              boxShadow: 3,\r\n              margin: \"2rem 0 0 0\",\r\n            }}>\r\n            <Grid item xs={12}>\r\n              <Header />\r\n            </Grid>\r\n            <Grid\r\n              container\r\n              sx={{\r\n                justifyContent: \"center\",\r\n                alignItems: \"center\",\r\n              }}>\r\n              <Grid\r\n                item\r\n                xs={11}\r\n                md={10}\r\n                sx={{\r\n                  justifyContent: \"center\",\r\n                  alignItems: \"center\",\r\n                  overflowX: \"scroll\",\r\n                  margin: \"0 .5rem 0 .5rem\",\r\n                }}>\r\n                <DynamicData />\r\n              </Grid>\r\n            </Grid>\r\n            <Grid container direction='row' justifyContent='flex-end' alignItems='center'>\r\n              <Footer />\r\n            </Grid>\r\n          </Box>\r\n        </Container>\r\n      </ThemeProvider>\r\n    </QueryClientProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { QueryClient, QueryClientProvider } from \"react-query\";\r\nimport \"@fontsource/roboto/300.css\";\r\nimport \"@fontsource/roboto/400.css\";\r\nimport \"@fontsource/roboto/500.css\";\r\nimport \"@fontsource/roboto/700.css\";\r\n\r\nconst queryClient = new QueryClient();\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <QueryClientProvider client={queryClient}>\r\n      <App />\r\n    </QueryClientProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}